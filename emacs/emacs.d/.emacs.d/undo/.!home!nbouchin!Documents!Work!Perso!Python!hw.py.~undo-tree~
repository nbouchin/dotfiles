"837d05bf7c257bcf83fc617c5f49d4d51b4bff72"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((#("f" 0 1 (fontified t)) . -325) (undo-tree-id1043 . -1) 326 (t 23247 19457 353637 422000)) nil (23247 19467 589009 892000) 0 nil]) ((387 . 388)) nil (23247 19457 198969 924000) 0 nil]) ((375 . 387)) nil (23247 19457 198983 100000) 0 nil]) ((354 . 375)) nil (23247 19457 198992 166000) 0 nil]) ((349 . 354)) nil (23247 19457 199000 817000) 0 nil]) ((344 . 349)) nil (23247 19457 199009 578000) 0 nil]) ((#("    " 0 4 (fontified t)) . -344) (undo-tree-id1029 . -4) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -4) (undo-tree-id1036 . -4) 348) nil (23247 19457 199086 573000) 0 nil]) ((#("e" 0 1 (fontified t)) . -348) (undo-tree-id1037 . -1) (#("l" 0 1 (fontified t)) . -349) (undo-tree-id1038 . -1) (#("s" 0 1 (fontified t)) . -350) (undo-tree-id1039 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -351) (undo-tree-id1040 . -1) 352) nil (23247 19457 199143 574000) 0 nil]) ((348 . 352)) nil (23247 19457 199166 449000) 0 nil]) ((343 . 348)) nil (23247 19457 199175 681000) 0 nil]) ((339 . 343)) nil (23247 19457 199184 740000) 0 nil]) ((#("h" 0 1 (fontified t face font-lock-string-face)) . -339) (undo-tree-id1041 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -340) (undo-tree-id1042 . -1) 341) nil (23247 19457 199213 412000) 0 nil]) ((320 . 341)) nil (23247 19457 199227 529000) 0 nil]) ((315 . 320)) nil (23247 19457 199236 532000) 0 nil]) ((305 . 315)) nil (23247 19457 199245 481000) 0 nil]) ((304 . 305)) nil (23247 19457 199254 407000) 0 nil]) ((299 . 304) (t 23247 19339 465142 744000)) nil (23247 19457 199265 792000) 0 nil]) ((#("
" 0 1 (fontified t)) . -299) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) 300 (t 23247 19174 196449 252000)) nil (23247 19339 309864 338000) 0 nil]) ((#("
" 0 1 (fontified t)) . -299) (undo-tree-id1021 . -1) 300) nil (23247 19174 169438 224000) 0 nil]) ((#("    " 0 4 (fontified t)) . -300) (undo-tree-id1022 . -4) 304) nil (23247 19174 169468 567000) 0 nil]) ((300 . 304) (#("    " 0 4 (fontified nil)) . 299) (undo-tree-id1023 . -4) (299 . 304) (#("    " 0 4 (fontified nil)) . 298) (undo-tree-id1024 . -4) (297 . 303) (t 23247 19172 8440 71000)) nil (23247 19174 169491 690000) 0 nil]) ((297 . 298)) nil (23247 19171 977395 806000) 0 nil]) ((295 . 297)) nil (23247 19171 977408 668000) 0 nil]) ((#(")" 0 1 (fontified t face font-lock-string-face)) . -295) (undo-tree-id1014 . -1) (#("(" 0 1 (fontified t face font-lock-string-face)) . -296) (undo-tree-id1015 . -1) 297) nil (23247 19171 977445 667000) 0 nil]) ((295 . 297)) nil (23247 19171 977459 842000) 0 nil]) ((#(":" 0 1 (fontified t face font-lock-string-face)) . -295) (undo-tree-id1016 . -1) 296) nil (23247 19171 977478 602000) 0 nil]) ((#(")" 0 1 (fontified t face font-lock-string-face)) . -296) (undo-tree-id1017 . -1) 297) nil (23247 19171 977499 371000) 0 nil]) ((276 . 297)) nil (23247 19171 977510 496000) 0 nil]) ((255 . 276)) nil (23247 19171 977519 353000) 0 nil]) ((#("r" 0 1 (fontified t)) . -255) (undo-tree-id1018 . -1) 256) nil (23247 19171 977538 619000) 0 nil]) ((255 . 256)) nil (23247 19171 977551 394000) 0 nil]) ((250 . 255)) nil (23247 19171 977560 74000) 0 nil]) ((242 . 250)) nil (23247 19171 977568 765000) 0 nil]) ((221 . 242)) nil (23247 19171 977577 370000) 0 nil]) ((220 . 221)) nil (23247 19171 977585 995000) 0 nil]) ((#("
" 0 1 (fontified t)) . -220) (undo-tree-id1019 . -1) (#("
" 0 1 (fontified t)) . -221) (undo-tree-id1020 . -1) 222) nil (23247 19171 977613 794000) 0 nil]) ((220 . 222)) nil (23247 19171 977627 319000) 0 nil]) ((207 . 220) (t 23247 19143 584320 799000)) nil (23247 19171 977638 651000) 0 nil]) ((#("    name" 0 8 (fontified t)) . 207) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -8) (undo-tree-id1011 . -4) (undo-tree-id1012 . -8)) nil (23247 19143 555365 761000) 0 nil]) ((211 . 215)) nil (23247 19143 555387 779000) 0 nil]) ((207 . 211) (#("    " 0 4 (fontified nil)) . 206) (undo-tree-id1013 . -4) (205 . 211) (t 23247 18809 986920 974000)) nil (23247 19143 555412 136000) 0 nil]) ((68 . 69)) nil (23247 18809 839127 595000) 0 nil]) ((#("U" 0 1 (fontified t face font-lock-string-face)) . -68) (undo-tree-id1004 . -1) 69 (t 23247 18796 750865 434000)) nil (23247 18809 839164 979000) 0 nil]) ((202 . 203) (t 23247 18795 402859 777000)) nil (23247 18796 724668 246000) 0 nil]) ((203 . 204)) nil (23247 18795 266154 278000) 0 nil]) ((201 . 203)) nil (23247 18795 266167 629000) 0 nil]) ((199 . 201)) nil (23247 18795 266176 868000) 0 nil]) ((#("i" 0 1 (fontified t face font-lock-string-face)) . -199) (undo-tree-id995 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -200) (undo-tree-id996 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -201) (undo-tree-id997 . -1) (#(">" 0 1 (fontified t face font-lock-string-face)) . -202) (undo-tree-id998 . -1) 203) nil (23247 18795 266264 211000) 0 nil]) ((183 . 203)) nil (23247 18795 266284 102000) 0 nil]) ((162 . 183)) nil (23247 18795 266293 86000) 0 nil]) ((157 . 162)) nil (23247 18795 266301 907000) 0 nil]) ((151 . 157)) nil (23247 18795 266310 788000) 0 nil]) ((132 . 151)) nil (23247 18795 266319 562000) 0 nil]) ((#("'" 0 1 (fontified t syntax-table #1=(15) face font-lock-string-face)) . -132) (undo-tree-id999 . -1) 133) nil (23247 18795 266338 408000) 0 nil]) ((121 . 133)) nil (23247 18795 266349 930000) 0 nil]) ((#("
" 0 1 (fontified t)) . -121) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) 122 (t 23247 18774 682772 833000)) nil (23247 18795 266394 80000) 0 nil]) ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) 2) nil (23247 18774 536628 79000) 0 nil]) ((#("x = 2
print(x == 2)
print(x == 3)
print(x < 3)
" 0 1 (fontified t face font-lock-variable-name-face) 1 6 (fontified t) 6 11 (fontified t face font-lock-keyword-face) 11 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 34 (fontified t) 34 39 (fontified t face font-lock-keyword-face) 39 46 (fontified t) 46 47 (fontified t)) . 1) (undo-tree-id954 . -6) (undo-tree-id955 . -6) (undo-tree-id956 . -20) (undo-tree-id957 . -20) (undo-tree-id958 . -34) (undo-tree-id959 . -34) (undo-tree-id960 . -47) (undo-tree-id961 . -47) (undo-tree-id962 . -47) (undo-tree-id963 . -47) (undo-tree-id964 . -46) (undo-tree-id965 . -34) (undo-tree-id966 . -34) (undo-tree-id967 . -44) (undo-tree-id968 . -47) (undo-tree-id969 . -33) (undo-tree-id970 . -20) (undo-tree-id971 . -20) (undo-tree-id972 . -47) 48) nil (23247 18774 536790 192000) 0 nil]) ((#("
" 0 1 (fontified t)) . -169) (undo-tree-id973 . -1) (undo-tree-id974 . 1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) 170) nil (23247 18774 536877 878000) 0 nil]) ((#("    " 0 4 (fontified t)) . -170) (undo-tree-id981 . -4) (undo-tree-id982 . -1) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) 174) nil (23247 18774 536933 478000) 0 nil]) ((170 . 174) (#("    " 0 4 (fontified nil)) . 169) (undo-tree-id986 . -4) (undo-tree-id987 . -1) (undo-tree-id988 . -4) (undo-tree-id989 . -1) (169 . 174) (#("    " 0 4 (fontified nil)) . 168) (undo-tree-id990 . -4) (undo-tree-id991 . -1) (undo-tree-id992 . -4) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (172 . 173) (t 23247 18765 46732 399000)) nil (23247 18774 537027 293000) 0 nil]) ((172 . 173)) nil (23247 18765 23616 59000) 0 nil]) ((167 . 172)) nil (23247 18765 23628 758000) 0 nil]) ((165 . 167)) nil (23247 18765 23635 635000) 0 nil]) ((149 . 165)) nil (23247 18765 23640 921000) 0 nil]) ((#("o" 0 1 (fontified t face font-lock-string-face)) . -149) (undo-tree-id940 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -150) (undo-tree-id941 . -1) 151) nil (23247 18765 23669 73000) 0 nil]) ((133 . 151)) nil (23247 18765 23684 647000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . -133) (undo-tree-id942 . -1) 134) nil (23247 18765 23704 654000) 0 nil]) ((130 . 134)) nil (23247 18765 23716 55000) 0 nil]) ((109 . 130)) nil (23247 18765 23724 793000) 0 nil]) ((104 . 109)) nil (23247 18765 23733 317000) 0 nil]) ((100 . 104)) nil (23247 18765 23741 895000) 0 nil]) ((#("2" 0 1 (fontified t)) . -100) (undo-tree-id943 . -1) (#("3" 0 1 (fontified t)) . -101) (undo-tree-id944 . -1) 102) nil (23247 18765 23770 189000) 0 nil]) ((85 . 102)) nil (23247 18765 23783 783000) 0 nil]) ((#("p" 0 1 (fontified t face font-lock-string-face)) . -85) (undo-tree-id945 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -86) (undo-tree-id946 . -1) 87) nil (23247 18765 23811 665000) 0 nil]) ((84 . 87)) nil (23247 18765 23825 219000) 0 nil]) ((#("H" 0 1 (fontified t face font-lock-string-face)) . -84) (undo-tree-id947 . -1) 85) nil (23247 18765 23843 827000) 0 nil]) ((83 . 85)) nil (23247 18765 23854 893000) 0 nil]) ((72 . 83)) nil (23247 18765 23863 460000) 0 nil]) ((71 . 72)) nil (23247 18765 23872 100000) 0 nil]) ((63 . 71)) nil (23247 18765 23880 675000) 0 nil]) ((62 . 63)) nil (23247 18765 23889 259000) 0 nil]) ((49 . 62)) nil (23247 18765 23897 797000) 0 nil]) ((#("
" 0 1 (fontified t)) . -49) (undo-tree-id948 . -1) 50) nil (23247 18765 23916 235000) 0 nil]) ((48 . 50) (t 23247 18649 890249 185000)) nil (23247 18765 23934 106000) 0 nil]) ((44 . 45) (t 23247 18645 70228 959000)) nil (23247 18649 766189 791000) 0 nil]) ((46 . 47)) nil (23247 18645 46356 475000) 0 nil]) ((40 . 46)) nil (23247 18645 46369 388000) 0 nil]) ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id936 . -1) (undo-tree-id937 . -1) 41) nil (23247 18645 46404 333000) 0 nil]) ((35 . 41)) nil (23247 18645 46417 592000) 0 nil]) ((34 . 35)) nil (23247 18645 46426 274000) 0 nil]) ((29 . 34)) nil (23247 18645 46434 895000) 0 nil]) ((21 . 29)) nil (23247 18645 46443 563000) 0 nil]) ((20 . 21)) nil (23247 18645 46452 299000) 0 nil]) ((7 . 20)) nil (23247 18645 46460 904000) 0 nil]) ((6 . 7)) nil (23247 18645 46469 490000) 0 nil]) ((4 . 6)) nil (23247 18645 46478 90000) 0 nil]) ((#("2" 0 1 (fontified t)) . -4) (undo-tree-id938 . -1) 5) nil (23247 18645 46496 434000) 0 nil]) ((4 . 5)) nil (23247 18645 46507 980000) 0 nil]) ((#(" " 0 1 (fontified t)) . -4) (undo-tree-id939 . -1) 5) nil (23247 18645 46526 610000) 0 nil]) ((1 . 5) (t 23247 18613 846097 938000)) nil (23247 18645 46540 116000) 0 nil]) ((#("s = \"Here there! what should this string be?\"
# Length should be 20
print(\"Length of s = %d\" % len(s))

# First occurrence of \"a\" should be at index 8
print(\"The first occurrence of the letter a = %d\" % s.index(\"a\"))

# Number of a's should be 2
print(\"a occurs %d times\" % s.count(\"a\"))

# Slicing the string into bits
print(\"The first five characters are '%s'\" % s[:5]) # Start to 5
print(\"The next five characters are '%s'\" % s[5:10]) # 5 to 10
print(\"The thirteenth character is '%s'\" % s[12]) # Just number 12
print(\"The characters with odd index are '%s'\" %s[1::2]) #(0-based indexing)
print(\"The last five characters are '%s'\" % s[-5:]) # 5th-from-last to end

# Convert everything to uppercase
print(\"String in uppercase: %s\" % s.upper())

# Convert everything to lowercase
print(\"String in lowercase: %s\" % s.lower())

# Check how a string starts
if s.startswith(\"Str\"):
    print(\"String starts with 'Str'. Good!\")

# Check how a string ends
if s.endswith(\"ome!\"):
    print(\"String ends with 'ome!'. Good!\")

# Split the string into three separate strings,
# each containing only a word
print(\"Split the words of the string: %s\" % s.split(\" \"))
" 0 1 (fontified t face font-lock-variable-name-face) 1 4 (fontified t) 4 5 (fontified t syntax-table #1# face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 34 (fontified t face font-lock-string-face) 34 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 45 (fontified t syntax-table #1# face font-lock-string-face) 45 46 (fontified t) 46 48 (fontified t face font-lock-comment-delimiter-face) 48 68 (fontified t face font-lock-comment-face) 68 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 75 (syntax-table #1# fontified t face font-lock-string-face) 75 91 (fontified t face font-lock-string-face) 91 92 (syntax-table #1# fontified t face font-lock-string-face) 92 95 (fontified t) 95 98 (fontified t face font-lock-builtin-face) 98 104 (fontified t) 104 106 (fontified t face font-lock-comment-delimiter-face) 106 126 (fontified t face font-lock-comment-face) 126 127 (syntax-table #1# fontified t face font-lock-comment-face) 127 128 (fontified t face font-lock-comment-face) 128 129 (syntax-table #1# fontified t face font-lock-comment-face) 129 151 (fontified t face font-lock-comment-face) 151 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 158 (syntax-table #1# fontified t face font-lock-string-face) 158 199 (fontified t face font-lock-string-face) 199 200 (syntax-table #1# fontified t face font-lock-string-face) 200 211 (fontified t) 211 212 (syntax-table #1# fontified t face font-lock-string-face) 212 213 (fontified t face font-lock-string-face) 213 214 (syntax-table #1# fontified t face font-lock-string-face) 214 218 (fontified t) 218 220 (fontified t face font-lock-comment-delimiter-face) 220 231 (fontified t face font-lock-comment-face) 231 232 (syntax-table #1# fontified t face font-lock-comment-face) 232 246 (fontified t face font-lock-comment-face) 246 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t) 252 253 (syntax-table #1# fontified t face font-lock-string-face) 253 270 (fontified t face font-lock-string-face) 270 271 (syntax-table #1# fontified t face font-lock-string-face) 271 282 (fontified t) 282 283 (syntax-table #1# fontified t face font-lock-string-face) 283 284 (fontified t face font-lock-string-face) 284 285 (syntax-table #1# fontified t face font-lock-string-face) 285 289 (fontified t) 289 291 (fontified t face font-lock-comment-delimiter-face) 291 320 (fontified t face font-lock-comment-face) 320 325 (fontified t face font-lock-keyword-face) 325 326 (fontified t) 326 327 (syntax-table #1# fontified t face font-lock-string-face) 327 361 (fontified t face font-lock-string-face) 361 362 (syntax-table #1# fontified t face font-lock-string-face) 362 372 (fontified t) 372 374 (fontified t face font-lock-comment-delimiter-face) 374 385 (fontified t face font-lock-comment-face) 385 390 (fontified t face font-lock-keyword-face) 390 391 (fontified t) 391 392 (syntax-table #1# fontified t face font-lock-string-face) 392 425 (fontified t face font-lock-string-face) 425 426 (syntax-table #1# fontified t face font-lock-string-face) 426 438 (fontified t) 438 440 (fontified t face font-lock-comment-delimiter-face) 440 448 (fontified t face font-lock-comment-face) 448 453 (fontified t face font-lock-keyword-face) 453 454 (fontified t) 454 455 (syntax-table #1# fontified t face font-lock-string-face) 455 487 (fontified t face font-lock-string-face) 487 488 (syntax-table #1# fontified t face font-lock-string-face) 488 498 (fontified t) 498 500 (fontified t face font-lock-comment-delimiter-face) 500 501 (fontified t face font-lock-comment-face) 501 510 (fontified t face font-lock-comment-face) 510 515 (fontified t face font-lock-comment-face) 515 520 (fontified t face font-lock-keyword-face) 520 521 (fontified t) 521 522 (fontified t syntax-table #1# face font-lock-string-face) 522 546 (fontified t face font-lock-string-face) 546 560 (face font-lock-string-face fontified t) 560 561 (syntax-table #1# face font-lock-string-face fontified t) 561 572 (fontified t) 572 573 (face font-lock-comment-delimiter-face fontified t) 573 592 (face font-lock-comment-face fontified t) 592 597 (fontified t face font-lock-keyword-face) 597 598 (fontified t) 598 599 (syntax-table #1# fontified t face font-lock-string-face) 599 632 (fontified t face font-lock-string-face) 632 633 (syntax-table #1# fontified t face font-lock-string-face) 633 644 (fontified t) 644 646 (fontified t face font-lock-comment-delimiter-face) 646 667 (fontified t face font-lock-comment-face) 667 668 (fontified t) 668 670 (fontified t face font-lock-comment-delimiter-face) 670 702 (fontified t face font-lock-comment-face) 702 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 709 (syntax-table #1# fontified t face font-lock-string-face) 709 732 (fontified t face font-lock-string-face) 732 733 (syntax-table #1# fontified t face font-lock-string-face) 733 748 (fontified t) 748 750 (fontified t face font-lock-comment-delimiter-face) 750 782 (fontified t face font-lock-comment-face) 782 787 (fontified t face font-lock-keyword-face) 787 788 (fontified t) 788 789 (syntax-table #1# fontified t face font-lock-string-face) 789 812 (fontified t face font-lock-string-face) 812 813 (syntax-table #1# fontified t face font-lock-string-face) 813 828 (fontified t) 828 830 (fontified t face font-lock-comment-delimiter-face) 830 856 (fontified t face font-lock-comment-face) 856 858 (fontified t face font-lock-keyword-face) 858 872 (fontified t) 872 873 (syntax-table #1# fontified t face font-lock-string-face) 873 876 (fontified t face font-lock-string-face) 876 877 (syntax-table #1# fontified t face font-lock-string-face) 877 884 (fontified t) 884 889 (fontified t face font-lock-keyword-face) 889 890 (fontified t) 890 891 (syntax-table #1# fontified t face font-lock-string-face) 891 922 (fontified t face font-lock-string-face) 922 923 (syntax-table #1# fontified t face font-lock-string-face) 923 926 (fontified t) 926 928 (fontified t face font-lock-comment-delimiter-face) 928 952 (fontified t face font-lock-comment-face) 952 954 (fontified t face font-lock-keyword-face) 954 966 (fontified t) 966 967 (syntax-table #1# fontified t face font-lock-string-face) 967 971 (fontified t face font-lock-string-face) 971 972 (syntax-table #1# fontified t face font-lock-string-face) 972 979 (fontified t) 979 984 (fontified t face font-lock-keyword-face) 984 985 (fontified t) 985 986 (syntax-table #1# fontified t face font-lock-string-face) 986 1015 (fontified t face font-lock-string-face) 1015 1016 (fontified t face font-lock-string-face) 1016 1017 (syntax-table #1# fontified t face font-lock-string-face) 1017 1019 (fontified t) 1019 1020 (fontified t) 1020 1022 (fontified t face font-lock-comment-delimiter-face) 1022 1068 (fontified t face font-lock-comment-face) 1068 1070 (fontified t face font-lock-comment-delimiter-face) 1070 1092 (fontified t face font-lock-comment-face) 1092 1098 (face font-lock-comment-face fontified t) 1098 1103 (fontified t face font-lock-keyword-face) 1103 1104 (fontified t) 1104 1105 (syntax-table #1# fontified t face font-lock-string-face) 1105 1138 (fontified t face font-lock-string-face) 1138 1139 (syntax-table #1# fontified t face font-lock-string-face) 1139 1150 (fontified t) 1150 1151 (syntax-table #1# fontified t face font-lock-string-face) 1151 1152 (fontified t face font-lock-string-face) 1152 1153 (syntax-table #1# fontified t face font-lock-string-face) 1153 1155 (fontified t) 1155 1156 (fontified t)) . 1) (undo-tree-id784 . -1156) (undo-tree-id785 . -46) (undo-tree-id786 . -46) (undo-tree-id787 . -667) (undo-tree-id788 . -667) (undo-tree-id789 . -592) (undo-tree-id790 . -592) (undo-tree-id791 . -515) (undo-tree-id792 . -515) (undo-tree-id793 . -448) (undo-tree-id794 . -448) (undo-tree-id795 . -385) (undo-tree-id796 . -385) (undo-tree-id797 . -320) (undo-tree-id798 . -320) (undo-tree-id799 . -289) (undo-tree-id800 . -289) (undo-tree-id801 . -288) (undo-tree-id802 . -288) (undo-tree-id803 . -246) (undo-tree-id804 . -246) (undo-tree-id805 . -218) (undo-tree-id806 . -218) (undo-tree-id807 . -217) (undo-tree-id808 . -217) (undo-tree-id809 . -151) (undo-tree-id810 . -151) (undo-tree-id811 . -104) (undo-tree-id812 . -104) (undo-tree-id813 . -103) (undo-tree-id814 . -103) (undo-tree-id815 . -68) (undo-tree-id816 . -68) (undo-tree-id817 . -668) (undo-tree-id818 . -668) (undo-tree-id819 . -702) (undo-tree-id820 . -702) (undo-tree-id821 . -747) (undo-tree-id822 . -747) (undo-tree-id823 . -748) (undo-tree-id824 . -748) (undo-tree-id825 . -782) (undo-tree-id826 . -782) (undo-tree-id827 . -827) (undo-tree-id828 . -827) (undo-tree-id829 . -828) (undo-tree-id830 . -828) (undo-tree-id831 . -856) (undo-tree-id832 . -856) (undo-tree-id833 . -880) (undo-tree-id834 . -880) (undo-tree-id835 . -925) (undo-tree-id836 . -925) (undo-tree-id837 . -926) (undo-tree-id838 . -926) (undo-tree-id839 . -952) (undo-tree-id840 . -952) (undo-tree-id841 . -975) (undo-tree-id842 . -975) (undo-tree-id843 . -1019) (undo-tree-id844 . -1019) (undo-tree-id845 . -1020) (undo-tree-id846 . -1020) (undo-tree-id847 . -880) (undo-tree-id848 . -881) (undo-tree-id849 . -975) (undo-tree-id850 . -976) (undo-tree-id851 . -1068) (undo-tree-id852 . -1068) (undo-tree-id853 . -1098) (undo-tree-id854 . -1098) (undo-tree-id855 . -288) (undo-tree-id856 . -288) (undo-tree-id857 . -288) (undo-tree-id858 . -4) (undo-tree-id859 . -68) (undo-tree-id860 . -68) (undo-tree-id861 . -151) (undo-tree-id862 . -151) (undo-tree-id863 . -151) (undo-tree-id864 . -151) (undo-tree-id865 . -246) (undo-tree-id866 . -246) (undo-tree-id867 . -246) (undo-tree-id868 . -246) (undo-tree-id869 . -320) (undo-tree-id870 . -320) (undo-tree-id871 . -385) (undo-tree-id872 . -385) (undo-tree-id873 . -448) (undo-tree-id874 . -448) (undo-tree-id875 . -515) (undo-tree-id876 . -515) (undo-tree-id877 . -592) (undo-tree-id878 . -592) (undo-tree-id879 . -702) (undo-tree-id880 . -702) (undo-tree-id881 . -782) (undo-tree-id882 . -782) (undo-tree-id883 . -856) (undo-tree-id884 . -856) (undo-tree-id885 . -884) (undo-tree-id886 . -884) (undo-tree-id887 . -952) (undo-tree-id888 . -952) (undo-tree-id889 . -979) (undo-tree-id890 . -979) (undo-tree-id891 . -1098) (undo-tree-id892 . -1098) (undo-tree-id893 . -1098) (undo-tree-id894 . -1098) (undo-tree-id895 . -1156) (undo-tree-id896 . -1156) (undo-tree-id897 . -952) (undo-tree-id898 . -952) (undo-tree-id899 . -952) (undo-tree-id900 . -856) (undo-tree-id901 . -856) (undo-tree-id902 . -856) (undo-tree-id903 . -856) (undo-tree-id904 . -1156) (undo-tree-id905 . -1156) (undo-tree-id906 . -1098) (undo-tree-id907 . -1098) (undo-tree-id908 . -979) (undo-tree-id909 . -979) (undo-tree-id910 . -952) (undo-tree-id911 . -952) (undo-tree-id912 . -884) (undo-tree-id913 . -884) (undo-tree-id914 . -856) (undo-tree-id915 . -856) (undo-tree-id916 . -782) (undo-tree-id917 . -782) (undo-tree-id918 . -702) (undo-tree-id919 . -702) (undo-tree-id920 . -592) (undo-tree-id921 . -592) (undo-tree-id922 . -515) (undo-tree-id923 . -515) (undo-tree-id924 . -448) (undo-tree-id925 . -448) (undo-tree-id926 . -385) (undo-tree-id927 . -385) (undo-tree-id928 . -320) (undo-tree-id929 . -320) (undo-tree-id930 . -246) (undo-tree-id931 . -246) (undo-tree-id932 . -151) (undo-tree-id933 . -151) (undo-tree-id934 . -68) (undo-tree-id935 . -68) (t 23247 18404 625220 16000)) nil (23247 18613 819142 69000) 0 nil] [nil nil ((#("H" 0 1 (fontified t face font-lock-string-face)) . -6) (undo-tree-id779 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7) (undo-tree-id780 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -8) (undo-tree-id781 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -9) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -10) (undo-tree-id783 . -1) 11 (t 23247 18404 625220 16000)) ((6 . 11)) (23247 18474 986265 829000) 0 nil]) ((10 . 11)) nil (23247 18474 987976 481000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . -10) (undo-tree-id778 . -1) 11) nil (23247 18404 497298 634000) 0 nil]) ((10 . 11) (t 23247 18400 305201 889000)) nil (23247 18404 497313 718000) 0 nil] [nil ([nil ([nil nil ((52 . 53) (t 23247 18373 793090 640000)) ((#("!" 0 1 (fontified t face font-lock-string-face)) . 52) (undo-tree-id776 . -1) (t 23247 18383 469131 242000)) (23247 18383 443922 845000) 0 nil]) ((48 . 52) (t 23247 18370 957078 740000)) ((#(" ome" 0 4 (fontified t face font-lock-string-face)) . 48) (undo-tree-id777 . -4)) (23247 18398 294051 491000) 0 nil]) ((6 . 10)) ((#("Str " 0 4 (fontified t face font-lock-string-face)) . 6)) (23247 18398 681062 481000) 0 nil]) ((7 . 10)) nil (23247 18399 91331 233000) 0 nil]) ((#("e" 0 1 (fontified t face font-lock-string-face)) . -7) (undo-tree-id773 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -8) (undo-tree-id774 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -9) (undo-tree-id775 . -1) 10 (t 23247 18330 752910 37000)) nil (23247 18370 933241 330000) 0 nil]) ((1155 . 1156) 1) nil (23247 18330 731922 425000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("what " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . -6) (undo-tree-id449 . -5) 11) ((6 . 11) (t 23247 18309 892822 505000)) (23247 18309 875175 342000) 0 nil]) ((#("should " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face)) . -11) (undo-tree-id450 . -7) 18) ((11 . 18)) (23247 18312 78193 291000) 0 nil]) ((#("this " 0 5 (fontified t face font-lock-string-face)) . -18) (undo-tree-id451 . -5) 23) ((18 . 23)) (23247 18312 529739 671000) 0 nil]) ((#("string " 0 7 (fontified t face font-lock-string-face)) . -23) (undo-tree-id452 . -7) 30) ((23 . 30)) (23247 18312 700512 458000) 0 nil]) ((#("ome" 0 3 (fontified t face font-lock-string-face)) . -30) (undo-tree-id453 . -3) 33 (t 23247 18302 576791 806000)) ((30 . 33)) (23247 18313 37846 720000) 0 nil]) ((30 . 33)) ((#("ome" 0 3 (fontified t face font-lock-string-face)) . 30) (undo-tree-id454 . -3)) (23247 18313 260172 702000) 0 nil]) ((#("b" 0 1 (fontified t face font-lock-string-face)) . -30) (undo-tree-id446 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -31) (undo-tree-id447 . -1) (#("?" 0 1 (fontified t face font-lock-string-face)) . -32) (undo-tree-id448 . -1) 33 (t 23247 18269 372652 476000)) ((30 . 33)) (23247 18313 615762 305000) 0 nil] [nil nil ((#("w" 0 1 (fontified t face font-lock-string-face)) . -6) (undo-tree-id434 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -7) (undo-tree-id435 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -8) (undo-tree-id436 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -9) (undo-tree-id437 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -10) (undo-tree-id438 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -11) (undo-tree-id439 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -12) (undo-tree-id440 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -13) (undo-tree-id441 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -14) (undo-tree-id442 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -15) (undo-tree-id443 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -16) (undo-tree-id444 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -17) (undo-tree-id445 . -1) 18 (t 23247 18256 876600 41000)) ((6 . 18) (t 23247 18263 404627 433000)) (23247 18263 386903 996000) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-string-face)) . -6) (undo-tree-id427 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -7) (undo-tree-id428 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -8) (undo-tree-id429 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -9) (undo-tree-id430 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -10) (undo-tree-id431 . -1) (#("!" 0 1 (fontified t face font-lock-string-face)) . -11) (undo-tree-id432 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -12) (undo-tree-id433 . -1) 13 (t 23247 18250 900574 965000)) ((6 . 13)) (23247 18313 794338 704000) 0 nil]) ((#("H" 0 1 (fontified t face font-lock-string-face)) . 6) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1)) ((6 . 7)) (23247 18323 289170 301000) 0 nil]) ((#("ey " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 7)) ((7 . 10)) (23247 18324 205250 969000) 0 nil] [nil ([nil nil ((#("H" 0 1 (fontified t face font-lock-string-face)) . -6) (undo-tree-id419 . -1) 7) ((6 . 7) (t 23247 18240 724532 264000)) (23247 18240 707124 161000) 0 nil]) ((#("e" 0 1 (fontified t face font-lock-string-face)) . -7) (undo-tree-id420 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -8) (undo-tree-id421 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -9) (undo-tree-id422 . -1) 10 (t 23247 18140 764112 815000)) ((7 . 10)) (23247 18245 371837 506000) 0 nil]) ((1155 . 1156)) (("
" . 1155)) (23247 18324 401078 999000) 0 nil]) ((1 . 1155)) ((#("s = \"Hey there! what should this string be?\"
# Length should be 20
print(\"Length of s = %d\" % len(s))

# First occurrence of \"a\" should be at index 8
print(\"The first occurrence of the letter a = %d\" % s.index(\"a\"))

# Number of a's should be 2
print(\"a occurs %d times\" % s.count(\"a\"))

# Slicing the string into bits
print(\"The first five characters are '%s'\" % s[:5]) # Start to 5
print(\"The next five characters are '%s'\" % s[5:10]) # 5 to 10
print(\"The thirteenth character is '%s'\" % s[12]) # Just number 12
print(\"The characters with odd index are '%s'\" %s[1::2]) #(0-based indexing)
print(\"The last five characters are '%s'\" % s[-5:]) # 5th-from-last to end

# Convert everything to uppercase
print(\"String in uppercase: %s\" % s.upper())

# Convert everything to lowercase
print(\"String in lowercase: %s\" % s.lower())

# Check how a string starts
if s.startswith(\"Str\"):
    print(\"String starts with 'Str'. Good!\")

# Check how a string ends
if s.endswith(\"ome!\"):
    print(\"String ends with 'ome!'. Good!\")

# Split the string into three separate strings,
# each containing only a word
print(\"Split the words of the string: %s\" % s.split(\" \"))" 0 1 (fontified t face font-lock-variable-name-face) 1 4 (fontified t) 4 5 (fontified t syntax-table #1# face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 33 (fontified t face font-lock-string-face) 33 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t syntax-table #1# face font-lock-string-face) 44 45 (fontified t) 45 47 (fontified t face font-lock-comment-delimiter-face) 47 67 (fontified t face font-lock-comment-face) 67 72 (fontified t face font-lock-keyword-face) 72 73 (fontified t) 73 74 (syntax-table #1# fontified t face font-lock-string-face) 74 90 (fontified t face font-lock-string-face) 90 91 (syntax-table #1# fontified t face font-lock-string-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-builtin-face) 97 103 (fontified t) 103 105 (fontified t face font-lock-comment-delimiter-face) 105 125 (fontified t face font-lock-comment-face) 125 126 (syntax-table #1# fontified t face font-lock-comment-face) 126 127 (fontified t face font-lock-comment-face) 127 128 (syntax-table #1# fontified t face font-lock-comment-face) 128 150 (fontified t face font-lock-comment-face) 150 155 (fontified t face font-lock-keyword-face) 155 156 (fontified t) 156 157 (syntax-table #1# fontified t face font-lock-string-face) 157 198 (fontified t face font-lock-string-face) 198 199 (syntax-table #1# fontified t face font-lock-string-face) 199 210 (fontified t) 210 211 (syntax-table #1# fontified t face font-lock-string-face) 211 212 (fontified t face font-lock-string-face) 212 213 (syntax-table #1# fontified t face font-lock-string-face) 213 217 (fontified t) 217 219 (fontified t face font-lock-comment-delimiter-face) 219 230 (fontified t face font-lock-comment-face) 230 231 (syntax-table #1# fontified t face font-lock-comment-face) 231 245 (fontified t face font-lock-comment-face) 245 250 (fontified t face font-lock-keyword-face) 250 251 (fontified t) 251 252 (syntax-table #1# fontified t face font-lock-string-face) 252 269 (fontified t face font-lock-string-face) 269 270 (syntax-table #1# fontified t face font-lock-string-face) 270 281 (fontified t) 281 282 (syntax-table #1# fontified t face font-lock-string-face) 282 283 (fontified t face font-lock-string-face) 283 284 (syntax-table #1# fontified t face font-lock-string-face) 284 288 (fontified t) 288 290 (fontified t face font-lock-comment-delimiter-face) 290 319 (fontified t face font-lock-comment-face) 319 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 326 (syntax-table #1# fontified t face font-lock-string-face) 326 360 (fontified t face font-lock-string-face) 360 361 (syntax-table #1# fontified t face font-lock-string-face) 361 371 (fontified t) 371 373 (fontified t face font-lock-comment-delimiter-face) 373 384 (fontified t face font-lock-comment-face) 384 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 391 (syntax-table #1# fontified t face font-lock-string-face) 391 424 (fontified t face font-lock-string-face) 424 425 (syntax-table #1# fontified t face font-lock-string-face) 425 437 (fontified t) 437 439 (fontified t face font-lock-comment-delimiter-face) 439 447 (fontified t face font-lock-comment-face) 447 452 (fontified t face font-lock-keyword-face) 452 453 (fontified t) 453 454 (syntax-table #1# fontified t face font-lock-string-face) 454 486 (fontified t face font-lock-string-face) 486 487 (syntax-table #1# fontified t face font-lock-string-face) 487 497 (fontified t) 497 499 (fontified t face font-lock-comment-delimiter-face) 499 500 (fontified t face font-lock-comment-face) 500 509 (fontified t face font-lock-comment-face) 509 514 (fontified t face font-lock-comment-face) 514 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 521 (fontified t syntax-table #1# face font-lock-string-face) 521 545 (fontified t face font-lock-string-face) 545 559 (face font-lock-string-face fontified t) 559 560 (syntax-table #1# face font-lock-string-face fontified t) 560 571 (fontified t) 571 572 (face font-lock-comment-delimiter-face fontified t) 572 591 (face font-lock-comment-face fontified t) 591 596 (fontified t face font-lock-keyword-face) 596 597 (fontified t) 597 598 (syntax-table #1# fontified t face font-lock-string-face) 598 631 (fontified t face font-lock-string-face) 631 632 (syntax-table #1# fontified t face font-lock-string-face) 632 643 (fontified t) 643 645 (fontified t face font-lock-comment-delimiter-face) 645 666 (fontified t face font-lock-comment-face) 666 667 (fontified t) 667 669 (fontified t face font-lock-comment-delimiter-face) 669 701 (fontified t face font-lock-comment-face) 701 706 (fontified t face font-lock-keyword-face) 706 707 (fontified t) 707 708 (syntax-table #1# fontified t face font-lock-string-face) 708 731 (fontified t face font-lock-string-face) 731 732 (syntax-table #1# fontified t face font-lock-string-face) 732 747 (fontified t) 747 749 (fontified t face font-lock-comment-delimiter-face) 749 781 (fontified t face font-lock-comment-face) 781 786 (fontified t face font-lock-keyword-face) 786 787 (fontified t) 787 788 (syntax-table #1# fontified t face font-lock-string-face) 788 811 (fontified t face font-lock-string-face) 811 812 (syntax-table #1# fontified t face font-lock-string-face) 812 827 (fontified t) 827 829 (fontified t face font-lock-comment-delimiter-face) 829 855 (fontified t face font-lock-comment-face) 855 857 (fontified t face font-lock-keyword-face) 857 871 (fontified t) 871 872 (syntax-table #1# fontified t face font-lock-string-face) 872 875 (fontified t face font-lock-string-face) 875 876 (syntax-table #1# fontified t face font-lock-string-face) 876 883 (fontified t) 883 888 (fontified t face font-lock-keyword-face) 888 889 (fontified t) 889 890 (syntax-table #1# fontified t face font-lock-string-face) 890 921 (fontified t face font-lock-string-face) 921 922 (syntax-table #1# fontified t face font-lock-string-face) 922 925 (fontified t) 925 927 (fontified t face font-lock-comment-delimiter-face) 927 951 (fontified t face font-lock-comment-face) 951 953 (fontified t face font-lock-keyword-face) 953 965 (fontified t) 965 966 (syntax-table #1# fontified t face font-lock-string-face) 966 970 (fontified t face font-lock-string-face) 970 971 (syntax-table #1# fontified t face font-lock-string-face) 971 978 (fontified t) 978 983 (fontified t face font-lock-keyword-face) 983 984 (fontified t) 984 985 (syntax-table #1# fontified t face font-lock-string-face) 985 1014 (fontified t face font-lock-string-face) 1014 1015 (fontified t face font-lock-string-face) 1015 1016 (syntax-table #1# fontified t face font-lock-string-face) 1016 1018 (fontified t) 1018 1019 (fontified t) 1019 1021 (fontified t face font-lock-comment-delimiter-face) 1021 1067 (fontified t face font-lock-comment-face) 1067 1069 (fontified t face font-lock-comment-delimiter-face) 1069 1091 (fontified t face font-lock-comment-face) 1091 1097 (face font-lock-comment-face fontified t) 1097 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1104 (syntax-table #1# fontified t face font-lock-string-face) 1104 1137 (fontified t face font-lock-string-face) 1137 1138 (syntax-table #1# fontified t face font-lock-string-face) 1138 1149 (fontified t) 1149 1150 (syntax-table #1# fontified t face font-lock-string-face) 1150 1151 (fontified t face font-lock-string-face) 1151 1152 (syntax-table #1# fontified t face font-lock-string-face) 1152 1154 (fontified t)) . 1) (undo-tree-id545 . -1154) (undo-tree-id546 . -1154) (undo-tree-id547 . -667) (undo-tree-id548 . -101) (undo-tree-id549 . -4) (undo-tree-id550 . -67) (undo-tree-id551 . -67) (undo-tree-id552 . -150) (undo-tree-id553 . -150) (undo-tree-id554 . -150) (undo-tree-id555 . -150) (undo-tree-id556 . -245) (undo-tree-id557 . -245) (undo-tree-id558 . -245) (undo-tree-id559 . -245) (undo-tree-id560 . -319) (undo-tree-id561 . -319) (undo-tree-id562 . -384) (undo-tree-id563 . -384) (undo-tree-id564 . -447) (undo-tree-id565 . -447) (undo-tree-id566 . -514) (undo-tree-id567 . -514) (undo-tree-id568 . -591) (undo-tree-id569 . -591) (undo-tree-id570 . -701) (undo-tree-id571 . -701) (undo-tree-id572 . -781) (undo-tree-id573 . -781) (undo-tree-id574 . -855) (undo-tree-id575 . -855) (undo-tree-id576 . -883) (undo-tree-id577 . -883) (undo-tree-id578 . -951) (undo-tree-id579 . -951) (undo-tree-id580 . -978) (undo-tree-id581 . -978) (undo-tree-id582 . -1097) (undo-tree-id583 . -1097) (undo-tree-id584 . -1097) (undo-tree-id585 . -1097) (undo-tree-id586 . -1097) (undo-tree-id587 . -1097) (undo-tree-id588 . -1097) (undo-tree-id589 . -1097) (undo-tree-id590 . -4) (undo-tree-id591 . -6) (undo-tree-id592 . -1067) (undo-tree-id593 . -1067) (undo-tree-id594 . -1097) (undo-tree-id595 . -1097) (undo-tree-id596 . -4) (undo-tree-id597 . -1097) (undo-tree-id598 . -1097) (undo-tree-id599 . -1097) (undo-tree-id600 . -1097) (undo-tree-id601 . -701) (undo-tree-id602 . -701) (undo-tree-id603 . -781) (undo-tree-id604 . -781) (undo-tree-id605 . -855) (undo-tree-id606 . -855) (undo-tree-id607 . -883) (undo-tree-id608 . -883) (undo-tree-id609 . -951) (undo-tree-id610 . -951) (undo-tree-id611 . -978) (undo-tree-id612 . -978) (undo-tree-id613 . -1097) (undo-tree-id614 . -1097) (undo-tree-id615 . -1097) (undo-tree-id616 . -1097) (undo-tree-id617 . -1097) (undo-tree-id618 . -1097) (undo-tree-id619 . -1097) (undo-tree-id620 . -1097) (undo-tree-id621 . -4) (undo-tree-id622 . -67) (undo-tree-id623 . -67) (undo-tree-id624 . -150) (undo-tree-id625 . -150) (undo-tree-id626 . -150) (undo-tree-id627 . -150) (undo-tree-id628 . -245) (undo-tree-id629 . -245) (undo-tree-id630 . -245) (undo-tree-id631 . -245) (undo-tree-id632 . -319) (undo-tree-id633 . -319) (undo-tree-id634 . -384) (undo-tree-id635 . -384) (undo-tree-id636 . -447) (undo-tree-id637 . -447) (undo-tree-id638 . -6) (undo-tree-id639 . -514) (undo-tree-id640 . -514) (undo-tree-id641 . -591) (undo-tree-id642 . -591) (undo-tree-id643 . -667) (undo-tree-id644 . -667) (undo-tree-id645 . -701) (undo-tree-id646 . -701) (undo-tree-id647 . -746) (undo-tree-id648 . -746) (undo-tree-id649 . -747) (undo-tree-id650 . -747) (undo-tree-id651 . -781) (undo-tree-id652 . -781) (undo-tree-id653 . -826) (undo-tree-id654 . -826) (undo-tree-id655 . -827) (undo-tree-id656 . -827) (undo-tree-id657 . -855) (undo-tree-id658 . -855) (undo-tree-id659 . -879) (undo-tree-id660 . -879) (undo-tree-id661 . -924) (undo-tree-id662 . -924) (undo-tree-id663 . -925) (undo-tree-id664 . -925) (undo-tree-id665 . -951) (undo-tree-id666 . -951) (undo-tree-id667 . -974) (undo-tree-id668 . -974) (undo-tree-id669 . -1018) (undo-tree-id670 . -1018) (undo-tree-id671 . -1019) (undo-tree-id672 . -1019) (undo-tree-id673 . -701) (undo-tree-id674 . -701) (undo-tree-id675 . -781) (undo-tree-id676 . -781) (undo-tree-id677 . -855) (undo-tree-id678 . -855) (undo-tree-id679 . -883) (undo-tree-id680 . -883) (undo-tree-id681 . -951) (undo-tree-id682 . -951) (undo-tree-id683 . -978) (undo-tree-id684 . -978) (undo-tree-id685 . -1097) (undo-tree-id686 . -1097) (undo-tree-id687 . -1097) (undo-tree-id688 . -1097) (undo-tree-id689 . -4) (undo-tree-id690 . -67) (undo-tree-id691 . -67) (undo-tree-id692 . -150) (undo-tree-id693 . -150) (undo-tree-id694 . -150) (undo-tree-id695 . -150) (undo-tree-id696 . -245) (undo-tree-id697 . -245) (undo-tree-id698 . -245) (undo-tree-id699 . -245) (undo-tree-id700 . -319) (undo-tree-id701 . -319) (undo-tree-id702 . -384) (undo-tree-id703 . -384) (undo-tree-id704 . -447) (undo-tree-id705 . -447) (undo-tree-id706 . -514) (undo-tree-id707 . -514) (undo-tree-id708 . -591) (undo-tree-id709 . -591) (undo-tree-id710 . -701) (undo-tree-id711 . -701) (undo-tree-id712 . -781) (undo-tree-id713 . -781) (undo-tree-id714 . -855) (undo-tree-id715 . -855) (undo-tree-id716 . -883) (undo-tree-id717 . -883) (undo-tree-id718 . -951) (undo-tree-id719 . -951) (undo-tree-id720 . -978) (undo-tree-id721 . -978) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -67) (undo-tree-id725 . -67) (undo-tree-id726 . -150) (undo-tree-id727 . -150) (undo-tree-id728 . -150) (undo-tree-id729 . -150) (undo-tree-id730 . -245) (undo-tree-id731 . -245) (undo-tree-id732 . -245) (undo-tree-id733 . -245) (undo-tree-id734 . -319) (undo-tree-id735 . -319) (undo-tree-id736 . -384) (undo-tree-id737 . -384) (undo-tree-id738 . -447) (undo-tree-id739 . -447) (undo-tree-id740 . -514) (undo-tree-id741 . -514) (undo-tree-id742 . -591) (undo-tree-id743 . -591) (undo-tree-id744 . -701) (undo-tree-id745 . -701) (undo-tree-id746 . -781) (undo-tree-id747 . -781) (undo-tree-id748 . -855) (undo-tree-id749 . -855) (undo-tree-id750 . -883) (undo-tree-id751 . -883) (undo-tree-id752 . -951) (undo-tree-id753 . -951) (undo-tree-id754 . -978) (undo-tree-id755 . -978) (undo-tree-id756 . -1097) (undo-tree-id757 . -1097) (undo-tree-id758 . -1097) (undo-tree-id759 . -1097) (undo-tree-id760 . -879) (undo-tree-id761 . -880) (undo-tree-id762 . -974) (undo-tree-id763 . -975)) (23247 18327 397534 36000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1)) ((1 . 2)) (23247 18327 56427 232000) 0 nil]) ((#("print(afewwords)" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 15 (fontified t) 15 16 (fontified t)) . 1)) ((1 . 17)) (23247 18326 702997 710000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1)) ((1 . 2)) (23247 18326 465118 63000) 0 nil]) ((#("afewwords = astring.split(\" \")" 0 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t) 12 26 (fontified t) 26 27 (fontified t syntax-table #1# face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t syntax-table #1# face font-lock-string-face) 29 30 (fontified t)) . 1) (undo-tree-id770 . -12) (undo-tree-id771 . -12) (undo-tree-id772 . -12)) ((1 . 31)) (23247 18326 306584 766000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1)) ((1 . 2)) (23247 18326 144683 944000) 0 nil]) ((#("astring = \"Hello world!\"" 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t) 10 11 (fontified t syntax-table #1# face font-lock-string-face) 11 23 (fontified t face font-lock-string-face) 23 24 (fontified t syntax-table #1# face font-lock-string-face)) . 1) (undo-tree-id766 . -10)) ((1 . 25)) (23247 18325 986530 120000) 0 nil]) ((#(")" 0 1 (fontified t)) . 72)) ((72 . 73)) (23247 18325 814874 172000) 0 nil]) ((63 . 73)) ((#("afewwords)" 0 9 (fontified t) 9 10 (fontified t)) . 63) (undo-tree-id764 . -10) (undo-tree-id765 . -10)) (23247 18325 639249 282000) 0 nil]) ((#("f" 0 1 (fontified t)) . -63) (undo-tree-id399 . -1) 64) nil (23247 18325 367287 728000) 0 nil]) ((63 . 64)) nil (23247 18094 145401 553000) 0 nil]) ((62 . 64)) nil (23247 18094 145413 858000) 0 nil]) ((#(" " 0 1 (fontified t)) . -62) (undo-tree-id400 . -1) (undo-tree-id401 . -1) 63) nil (23247 18094 145440 424000) 0 nil]) ((57 . 63)) nil (23247 18094 145452 763000) 0 nil]) ((56 . 57) (t 23247 18083 63868 779000)) nil (23247 18094 145463 984000) 0 nil]) ((56 . 57) 55) nil (23247 18083 49424 181000) 0 nil]) ((54 . 55)) nil (23247 18083 49444 853000) 0 nil]) ((#("'" 0 1 (fontified t face font-lock-string-face)) . -54) (undo-tree-id396 . -1) (#("'" 0 1 (fontified t face font-lock-string-face)) . -55) (undo-tree-id397 . -1) 56) nil (23247 18083 49481 157000) 0 nil]) ((52 . 56)) nil (23247 18083 49495 437000) 0 nil]) ((47 . 53)) nil (23247 18083 49503 949000) 0 nil]) ((26 . 47) (t 23247 18064 723789 198000)) nil (23247 18083 49514 883000) 0 nil]) ((#("
" 0 1 (fontified t)) . 26) (undo-tree-id393 . -1) (undo-tree-id394 . -1)) nil (23247 18064 709711 906000) 0 nil]) ((#("print(astring.startswith(\"Hello\"))" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 14 (fontified t) 14 25 (fontified t) 25 26 (fontified t syntax-table #1# face font-lock-string-face) 26 31 (fontified t face font-lock-string-face) 31 32 (fontified t syntax-table #1# face font-lock-string-face) 32 34 (fontified t)) . 26) (undo-tree-id395 . -34) (t 23247 18063 383783 383000)) nil (23247 18064 709742 677000) 0 nil]) ((#("
" 0 1 (fontified t)) . 61) (undo-tree-id390 . -1) (undo-tree-id391 . -1)) nil (23247 18063 369474 659000) 0 nil]) ((#("print(astring.endswith(\"asdfasdfasdf\"))" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 23 (fontified t) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 36 (fontified t face font-lock-string-face) 36 37 (fontified t syntax-table #1# face font-lock-string-face) 37 38 (fontified t) 38 39 (fontified t)) . 61) (undo-tree-id392 . -39) (t 23247 18060 139769 307000)) nil (23247 18063 369495 961000) 0 nil]) ((85 . 97)) nil (23247 18060 124112 188000) 0 nil]) ((86 . 87)) nil (23247 18060 124127 835000) 0 nil]) ((84 . 86)) nil (23247 18060 124139 257000) 0 nil]) ((#(":" 0 1 (fontified t)) . -84) (undo-tree-id374 . -1) 85) nil (23247 18060 124169 146000) 0 nil]) ((84 . 85)) nil (23247 18060 124181 678000) 0 nil]) ((83 . 85)) nil (23247 18060 124190 568000) 0 nil]) ((78 . 83)) nil (23247 18060 124199 560000) 0 nil]) ((#("w" 0 1 (fontified t)) . -78) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 79) nil (23247 18060 124233 262000) 0 nil]) ((66 . 79)) nil (23247 18060 124246 763000) 0 nil]) ((#("9" 0 1 (fontified t)) . -66) (undo-tree-id378 . -1) (#("a" 0 1 (fontified t)) . -67) (undo-tree-id379 . -1) 68) nil (23247 18060 124275 497000) 0 nil]) ((#("s" 0 1 (fontified t)) . -68) (undo-tree-id380 . -1) 69) nil (23247 18060 124299 97000) 0 nil]) ((61 . 69)) nil (23247 18060 124310 655000) 0 nil]) ((60 . 61)) nil (23247 18060 124319 491000) 0 nil]) ((59 . 60)) nil (23247 18060 124328 280000) 0 nil]) ((51 . 58)) nil (23247 18060 124337 106000) 0 nil]) ((#(":" 0 1 (fontified t)) . -51) (undo-tree-id381 . -1) (#("H" 0 1 (fontified t)) . -52) (undo-tree-id382 . -1) (#("E" 0 1 (fontified t)) . -53) (undo-tree-id383 . -1) 54) nil (23247 18060 124376 670000) 0 nil]) ((51 . 54)) nil (23247 18060 124393 270000) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -52) (undo-tree-id384 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -53) (undo-tree-id385 . -1) 54) nil (23247 18060 124421 157000) 0 nil]) ((50 . 54)) nil (23247 18060 124435 179000) 0 nil]) ((40 . 50) (#("startswi" 0 8 (fontified t)) . -40) (undo-tree-id386 . -8) 48) nil (23247 18060 124455 921000) 0 nil]) ((46 . 48)) nil (23247 18060 124468 301000) 0 nil]) ((#("t" 0 1 (fontified t)) . -46) (undo-tree-id387 . -1) 47) nil (23247 18060 124486 634000) 0 nil]) ((45 . 47)) nil (23247 18060 124498 32000) 0 nil]) ((#("w" 0 1 (fontified t)) . -45) (undo-tree-id388 . -1) 46) nil (23247 18060 124516 403000) 0 nil]) ((29 . 46)) nil (23247 18060 124527 782000) 0 nil]) ((#("t" 0 1 (fontified t)) . -29) (undo-tree-id389 . -1) 30) nil (23247 18060 124546 190000) 0 nil]) ((26 . 30) (t 23247 18026 911625 123000)) nil (23247 18060 124559 978000) 0 nil]) ((#("print(astring.lower())" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 22 (fontified t)) . 26) (undo-tree-id368 . -22)) nil (23247 18026 896612 640000) 0 nil]) ((#("
" 0 1 (fontified t)) . 26) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1)) nil (23247 18026 896658 667000) 0 nil]) ((#("print(astring.upper())" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 22 (fontified t)) . 26) (undo-tree-id372 . -22) (undo-tree-id373 . -22) 48 (t 23247 18011 483558 178000)) nil (23247 18026 896684 227000) 0 nil]) ((70 . 71)) nil (23247 18011 469818 202000) 0 nil]) ((#("0" 0 1 (fontified t)) . -70) (undo-tree-id363 . -1) 71) nil (23247 18011 469855 579000) 0 nil]) ((70 . 71)) nil (23247 18011 469866 601000) 0 nil]) ((68 . 70)) nil (23247 18011 469876 509000) 0 nil]) ((#("(" 0 1 (fontified t)) . -68) (undo-tree-id364 . -1) (#(")" 0 1 (fontified t)) . -69) (undo-tree-id365 . -1) 70) nil (23247 18011 469904 766000) 0 nil]) ((49 . 70)) nil (23247 18011 469915 783000) 0 nil]) ((48 . 49)) nil (23247 18011 469922 124000) 0 nil]) ((47 . 48)) nil (23247 18011 469927 249000) 0 nil]) ((#("0" 0 1 (fontified t)) . -47) (undo-tree-id366 . -1) 48) nil (23247 18011 469940 208000) 0 nil]) ((39 . 48)) nil (23247 18011 469948 393000) 0 nil]) ((26 . 39)) nil (23247 18011 469955 234000) 0 nil]) ((#("print(astring[::-2])" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 20 (fontified t)) . 26) (undo-tree-id367 . -20) (t 23247 17994 295483 595000)) nil (23247 18011 469968 116000) 0 nil]) ((#("print(astring" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 13 (fontified t)) . 47) (undo-tree-id359 . -6) (undo-tree-id360 . -13) (undo-tree-id361 . -13) (undo-tree-id362 . -13)) nil (23247 17994 278960 966000) 0 nil]) ((47 . 60) (t 23247 17926 947191 357000)) nil (23247 17994 278982 535000) 0 nil]) ((43 . 44)) nil (23247 17926 934656 382000) 0 nil]) ((#("1" 0 1 (fontified t)) . -43) (undo-tree-id358 . -1) 44 (t 23247 17919 655159 716000)) nil (23247 17926 934690 757000) 0 nil]) ((43 . 44)) nil (23247 17919 642617 623000) 0 nil]) ((#("2" 0 1 (fontified t)) . -43) (undo-tree-id357 . -1) 44 (t 23247 17911 603124 777000)) nil (23247 17919 642649 97000) 0 nil]) ((#("1" 0 1 (fontified t)) . -40) (undo-tree-id354 . -1) 41) nil (23247 17911 591820 913000) 0 nil]) ((#("8" 0 1 (fontified t)) . -42) (undo-tree-id355 . -1) 43) nil (23247 17911 591852 87000) 0 nil]) ((45 . 46)) nil (23247 17911 591865 792000) 0 nil]) ((#("1" 0 1 (fontified t)) . -45) (undo-tree-id356 . -1) 46 (t 23247 17895 143053 353000)) nil (23247 17911 591884 965000) 0 nil]) ((44 . 46)) nil (23247 17895 133668 24000) 0 nil]) ((#("2" 0 1 (fontified t)) . -44) (undo-tree-id350 . -1) 45) nil (23247 17895 133697 420000) 0 nil]) ((41 . 43)) nil (23247 17895 133708 649000) 0 nil]) ((#(";" 0 1 (fontified t)) . -41) (undo-tree-id351 . -1) 42) nil (23247 17895 133725 774000) 0 nil]) ((41 . 42)) nil (23247 17895 133736 16000) 0 nil]) ((#(":" 0 1 (fontified t)) . -41) (undo-tree-id352 . -1) (#("8" 0 1 (fontified t)) . -42) (undo-tree-id353 . -1) 43 (t 23247 17878 446980 905000)) nil (23247 17895 133763 562000) 0 nil]) ((42 . 43)) nil (23247 17878 434366 383000) 0 nil]) ((40 . 41)) nil (23247 17878 434383 19000) 0 nil]) ((42 . 43)) nil (23247 17878 434391 221000) 0 nil]) ((#("1" 0 1 (fontified t)) . -42) (undo-tree-id346 . -1) 43) nil (23247 17878 434421 592000) 0 nil]) ((42 . 43)) nil (23247 17878 434436 627000) 0 nil]) ((#("3" 0 1 (fontified t)) . -42) (undo-tree-id347 . -1) 43) nil (23247 17878 434458 759000) 0 nil]) ((42 . 43)) nil (23247 17878 434472 286000) 0 nil]) ((#("5" 0 1 (fontified t)) . -42) (undo-tree-id348 . -1) 43) nil (23247 17878 434486 228000) 0 nil]) ((42 . 43)) nil (23247 17878 434495 283000) 0 nil]) ((#("3" 0 1 (fontified t)) . -42) (undo-tree-id349 . -1) 43 (t 23247 17857 170888 584000)) nil (23247 17878 434508 667000) 0 nil]) ((42 . 43)) nil (23247 17857 159547 412000) 0 nil]) ((#("2" 0 1 (fontified t)) . -42) (undo-tree-id345 . -1) 43 (t 23247 17844 14831 497000)) nil (23247 17857 159581 803000) 0 nil]) ((42 . 43)) nil (23247 17844 5572 643000) 0 nil]) ((#("1" 0 1 (fontified t)) . -42) (undo-tree-id344 . -1) 43 (t 23247 17840 378815 720000)) nil (23247 17844 5603 115000) 0 nil]) ((#("-" 0 1 (fontified t)) . -42) (undo-tree-id343 . -1) 43 (t 23247 17835 530794 684000)) nil (23247 17840 366500 536000) 0 nil]) ((43 . 44)) nil (23247 17835 522265 363000) 0 nil]) ((40 . 43)) nil (23247 17835 522278 812000) 0 nil]) ((39 . 42)) nil (23247 17835 522287 179000) 0 nil]) ((32 . 39) (#("astrin" 0 6 (fontified t)) . -32) (undo-tree-id332 . -6) 38) nil (23247 17835 522313 791000) 0 nil]) ((34 . 38)) nil (23247 17835 522325 629000) 0 nil]) ((#("s" 0 1 (fontified t)) . -34) (undo-tree-id333 . -1) (#("t" 0 1 (fontified t)) . -35) (undo-tree-id334 . -1) (#("r" 0 1 (fontified t)) . -36) (undo-tree-id335 . -1) 37) nil (23247 17835 522360 259000) 0 nil]) ((26 . 37)) nil (23247 17835 522379 240000) 0 nil]) ((#("print(astring[3:7])
print(astring[3:7])" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 39 (fontified t)) . 26) (undo-tree-id336 . -39) (undo-tree-id337 . -20) (undo-tree-id338 . -20) (undo-tree-id339 . -39) (undo-tree-id340 . -19) (undo-tree-id341 . -20) (undo-tree-id342 . -39) 65 (t 23247 17783 454568 714000)) nil (23247 17835 522439 672000) 0 nil]) ((#(":" 0 1 (fontified t)) . -63) (undo-tree-id330 . -1) 64) nil (23247 17783 444621 382000) 0 nil]) ((#("3" 0 1 (fontified t)) . -64) (undo-tree-id331 . -1) 65 (t 23247 17776 934540 423000)) nil (23247 17783 444653 676000) 0 nil]) ((64 . 65)) nil (23247 17776 809158 488000) 0 nil]) ((#("9" 0 1 (fontified t)) . -64) (undo-tree-id329 . -1) 65 (t 23247 17773 498525 513000)) nil (23247 17776 809192 477000) 0 nil]) ((64 . 65)) nil (23247 17773 486715 648000) 0 nil]) ((#("2" 0 1 (fontified t)) . -64) (undo-tree-id328 . -1) 65 (t 23247 17763 894483 839000)) nil (23247 17773 486749 138000) 0 nil]) ((64 . 65)) nil (23247 17763 884755 650000) 0 nil]) ((#("1" 0 1 (fontified t)) . -64) (undo-tree-id327 . -1) 65 (t 23247 17759 974466 830000)) nil (23247 17763 884788 871000) 0 nil]) ((64 . 65)) nil (23247 17759 953149 153000) 0 nil]) ((#("3" 0 1 (fontified t)) . -64) (undo-tree-id326 . -1) 65 (t 23247 17751 90428 280000)) nil (23247 17759 953178 149000) 0 nil]) ((64 . 65)) nil (23247 17751 83336 305000) 0 nil]) ((#("2" 0 1 (fontified t)) . -64) (undo-tree-id325 . -1) 65 (t 23247 17745 810405 369000)) nil (23247 17751 83364 28000) 0 nil]) ((64 . 65)) nil (23247 17745 801323 939000) 0 nil]) ((#("1" 0 1 (fontified t)) . -64) (undo-tree-id324 . -1) 65 (t 23247 17739 374377 442000)) nil (23247 17745 801358 345000) 0 nil]) ((66 . 67)) nil (23247 17739 366914 387000) 0 nil]) ((64 . 65)) nil (23247 17739 366928 248000) 0 nil]) ((#(":" 0 1 (fontified t)) . -64) (undo-tree-id321 . -1) (#("1" 0 1 (fontified t)) . -65) (undo-tree-id322 . -1) 66) nil (23247 17739 366957 559000) 0 nil]) ((60 . 66)) nil (23247 17739 366966 602000) 0 nil]) ((59 . 61)) nil (23247 17739 366970 922000) 0 nil]) ((#("{" 0 1 (fontified t)) . -59) (undo-tree-id323 . -1) 60) nil (23247 17739 366986 49000) 0 nil]) ((46 . 60)) nil (23247 17739 366999 595000) 0 nil]) ((45 . 46) (t 23247 17729 598335 21000)) nil (23247 17739 367010 904000) 0 nil]) ((#(":" 0 1 (fontified t)) . -43) (undo-tree-id319 . -1) (#("2" 0 1 (fontified t)) . -44) (undo-tree-id320 . -1) 45 (t 23247 17605 117794 876000)) nil (23247 17729 482758 967000) 0 nil]) ((43 . 45) (t 23247 17580 25685 996000)) nil (23247 17605 103643 5000) 0 nil]) ((#(" " 0 1 (fontified t)) . -26) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) 27 (t 23247 17565 933626 805000)) nil (23247 17580 14145 65000) 0 nil]) ((45 . 46) (t 23247 17564 337620 108000)) nil (23247 17565 918670 868000) 0 nil]) ((41 . 44)) nil (23247 17564 321925 804000) 0 nil]) ((#("3" 0 1 (fontified t)) . -42) (undo-tree-id274 . -1) 43) nil (23247 17564 321980 5000) 0 nil]) ((30 . 43)) nil (23247 17564 322003 248000) 0 nil]) ((#("t" 0 1 (fontified t)) . -30) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("n" 0 1 (fontified t)) . -31) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 32) nil (23247 17564 322060 301000) 0 nil]) ((26 . 32)) nil (23247 17564 322075 627000) 0 nil]) ((#("print(astring.count(\"l\"))" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 20 (fontified t) 20 21 (fontified t syntax-table #1# face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t syntax-table #1# face font-lock-string-face) 23 25 (fontified t)) . 26) (undo-tree-id281 . -25)) nil (23247 17564 322091 909000) 0 nil]) ((#("
" 0 1 (fontified t)) . 26) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (t 23247 17546 101543 587000)) nil (23247 17564 322143 332000) 0 nil]) ((#("astring.isalnu" 0 8 (fontified t) 8 14 (fontified t)) . 26) (undo-tree-id268 . -14) (undo-tree-id269 . -14)) nil (23247 17546 90014 887000) 0 nil]) ((38 . 40)) nil (23247 17546 90031 433000) 0 nil]) ((#("n" 0 1 (fontified t)) . -38) (undo-tree-id270 . -1) 39) nil (23247 17546 90050 603000) 0 nil]) ((#("u" 0 1 (fontified t)) . -39) (undo-tree-id271 . -1) (#("m" 0 1 (fontified t)) . -40) (undo-tree-id272 . -1) 41) nil (23247 17546 90080 901000) 0 nil]) ((26 . 41)) nil (23247 17546 90094 534000) 0 nil]) ((25 . 26)) nil (23247 17546 90103 457000) 0 nil]) ((#("
" 0 1 (fontified t)) . -25) (undo-tree-id273 . -1) 26 (t 23247 17534 177493 552000)) nil (23247 17546 90124 488000) 0 nil]) ((#("astring.isalnum" 0 8 (fontified t) 8 15 (fontified t)) . 26) (undo-tree-id267 . -15)) nil (23247 17534 170471 566000) 0 nil]) ((34 . 41)) nil (23247 17534 170480 695000) 0 nil]) ((26 . 34)) nil (23247 17534 170484 732000) 0 nil]) ((25 . 26) (t 23247 17512 261401 589000)) nil (23247 17534 170488 21000) 0 nil]) ((#("." 0 1 (fontified t)) . -39) (undo-tree-id266 . -1) 40 (t 23247 17507 549381 816000)) nil (23247 17512 246615 451000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1)) nil (23247 17507 538365 830000) 0 nil]) ((#("))" 0 1 (fontified t) 1 2 (fontified t)) . 1) (undo-tree-id250 . -2) (undo-tree-id251 . -2)) nil (23247 17507 538402 359000) 0 nil]) ((#("astring = \"Hello world!\"
astring2 = 'hello world!'

print(astring2.index(\"o\"" 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t) 10 11 (fontified t syntax-table #1# face font-lock-string-face) 11 23 (fontified t face font-lock-string-face) 23 24 (fontified t syntax-table #1# face font-lock-string-face) 24 25 (fontified t) 25 33 (fontified t face font-lock-variable-name-face) 33 36 (fontified t) 36 37 (fontified t syntax-table #1# face font-lock-string-face) 37 49 (fontified t face font-lock-string-face) 49 50 (fontified t syntax-table #1# face font-lock-string-face) 50 51 (fontified t) 51 52 (fontified t) 52 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 67 (fontified t) 67 73 (fontified t) 73 74 (fontified t syntax-table #1# face font-lock-string-face) 74 75 (fontified t face font-lock-string-face) 75 76 (fontified t syntax-table #1# face font-lock-string-face)) . 1) (undo-tree-id252 . -76) (undo-tree-id253 . -25) (undo-tree-id254 . -25) (undo-tree-id255 . -51) (undo-tree-id256 . -51) (undo-tree-id257 . -51) (undo-tree-id258 . -51) (undo-tree-id259 . -52) (undo-tree-id260 . -52) (undo-tree-id261 . -25) (undo-tree-id262 . -76) (undo-tree-id263 . -24) (undo-tree-id264 . -25) (undo-tree-id265 . -76) 77 (t 23247 17501 261355 431000)) nil (23247 17507 538519 368000) 0 nil]) ((131 . 132)) nil (23247 17501 255160 716000) 0 nil]) ((128 . 131)) nil (23247 17501 255169 908000) 0 nil]) ((126 . 128)) nil (23247 17501 255176 285000) 0 nil]) ((105 . 126)) nil (23247 17501 255182 328000) 0 nil]) ((104 . 105)) nil (23247 17501 255188 334000) 0 nil]) ((101 . 104)) nil (23247 17501 255194 437000) 0 nil]) ((80 . 101) (t 23247 17428 325049 379000)) nil (23247 17501 255202 195000) 0 nil]) ((74 . 77)) nil (23247 17428 315393 609000) 0 nil]) ((59 . 75)) nil (23247 17428 315406 519000) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -59) (undo-tree-id216 . -1) 60) nil (23247 17428 315427 811000) 0 nil]) ((#("astring2." 0 9 (fontified t face font-lock-string-face)) . -60) (undo-tree-id217 . -9) 69) nil (23247 17428 315442 594000) 0 nil]) ((#("ind" 0 3 (fontified t face font-lock-string-face)) . -69) (undo-tree-id218 . -3) 72) nil (23247 17428 315461 274000) 0 nil]) ((#("e" 0 1 (fontified t face font-lock-string-face)) . -72) (undo-tree-id219 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id220 . -1) (#("(" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id221 . -1) (#(")" 0 1 (fontified t face font-lock-string-face)) . -75) (undo-tree-id222 . -1) (#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -76) (undo-tree-id223 . -1) 77) nil (23247 17428 315489 391000) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -76) (undo-tree-id224 . -1) 77) nil (23247 17428 315503 146000) 0 nil]) ((69 . 77)) nil (23247 17428 315515 617000) 0 nil]) ((#("o" 0 1 (fontified t face font-lock-string-face)) . -69) (undo-tree-id225 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -70) (undo-tree-id226 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -71) (undo-tree-id227 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -72) (undo-tree-id228 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id229 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -74) (undo-tree-id230 . -1) 75) nil (23247 17428 315575 979000) 0 nil]) ((64 . 75)) nil (23247 17428 315597 5000) 0 nil]) ((#("o" 0 1 (fontified t face font-lock-string-face)) . -64) (undo-tree-id231 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -65) (undo-tree-id232 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -66) (undo-tree-id233 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -67) (undo-tree-id234 . -1) 68) nil (23247 17428 315639 43000) 0 nil]) ((62 . 68)) nil (23247 17428 315655 766000) 0 nil]) ((60 . 62)) nil (23247 17428 315663 646000) 0 nil]) ((#("single " 0 7 (fontified t face font-lock-string-face)) . -60) (undo-tree-id235 . -7) 67) nil (23247 17428 315679 928000) 0 nil]) ((#("quotes " 0 7 (fontified t face font-lock-string-face)) . -67) (undo-tree-id236 . -7) 74) nil (23247 17428 315698 535000) 0 nil]) ((#("are ' '" 0 7 (fontified t face font-lock-string-face)) . -74) (undo-tree-id237 . -7) 81) nil (23247 17428 315716 868000) 0 nil]) ((#("
" 0 1 (fontified t)) . -83) (undo-tree-id238 . -1) 84) nil (23247 17428 315735 288000) 0 nil]) ((#("print(len(astring2))" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-builtin-face) 9 10 (fontified t) 10 20 (fontified t)) . 84)) nil (23247 17428 315745 276000) 0 nil]) ((101 . 102) (t 23247 17317 228584 90000)) nil (23247 17428 315755 979000) 0 nil]) ((89 . 103)) nil (23247 17317 217299 811000) 0 nil]) ((#(" " 0 1 (fontified t)) . -89) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 90) nil (23247 17317 217333 690000) 0 nil]) ((84 . 90)) nil (23247 17317 217343 711000) 0 nil]) ((83 . 84) (t 23247 17310 620558 253000)) nil (23247 17317 217349 968000) 0 nil]) ((83 . 84)) nil (23247 17310 610861 459000) 0 nil]) ((81 . 83)) nil (23247 17310 610873 995000) 0 nil]) ((79 . 80)) nil (23247 17310 610882 756000) 0 nil]) ((74 . 80)) nil (23247 17310 610891 289000) 0 nil]) ((53 . 74)) nil (23247 17310 610900 476000) 0 nil]) ((#(" PRINT (\"SINGLE QUOTE" 0 8 (fontified t) 8 9 (fontified t syntax-table #1# face font-lock-string-face) 9 21 (fontified t face font-lock-string-face)) . 53)) nil (23247 17310 610909 164000) 0 nil]) ((73 . 74)) nil (23247 17310 610918 889000) 0 nil]) ((#("A" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id212 . -1) 74) nil (23247 17310 610945 614000) 0 nil]) ((71 . 74)) nil (23247 17310 610957 268000) 0 nil]) ((#("I" 0 1 (fontified t face font-lock-string-face)) . -71) (undo-tree-id213 . -1) 72) nil (23247 17310 610976 251000) 0 nil]) ((53 . 72)) nil (23247 17310 610987 603000) 0 nil]) ((#("PRINT" 0 5 (fontified t)) . 53)) nil (23247 17310 610996 345000) 0 nil]) ((53 . 58)) nil (23247 17310 611005 604000) 0 nil]) ((52 . 53) (t 23247 17266 92384 145000)) nil (23247 17310 611016 734000) 0 nil]) ((nil fontified t 51 . 52) (nil face font-lock-string-face 51 . 52) (51 . 52)) nil (23247 17266 84476 192000) 0 nil]) ((49 . 51)) nil (23247 17266 84490 924000) 0 nil]) ((#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -49) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("!" 0 1 (fontified t)) . -50) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 51) nil (23247 17266 84563 15000) 0 nil]) ((49 . 51)) nil (23247 17266 84582 360000) 0 nil]) ((#("~" 0 1 (fontified t face font-lock-string-face)) . -49) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -50) (undo-tree-id200 . -1) 51) nil (23247 17266 84617 384000) 0 nil]) ((50 . 51)) nil (23247 17266 84632 171000) 0 nil]) ((#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -50) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 51) nil (23247 17266 84657 451000) 0 nil]) ((47 . 51)) nil (23247 17266 84669 790000) 0 nil]) ((#("d" 0 1 (fontified t face font-lock-string-face)) . -47) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -48) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 49) nil (23247 17266 84718 981000) 0 nil]) ((41 . 49)) nil (23247 17266 84735 657000) 0 nil]) ((37 . 41)) nil (23247 17266 84744 385000) 0 nil]) ((#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -37) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 38) nil (23247 17266 84776 731000) 0 nil]) ((27 . 38)) nil (23247 17266 84789 832000) 0 nil]) ((#("t" 0 1 (fontified t)) . -27) (undo-tree-id211 . -1) 28) nil (23247 17266 84807 989000) 0 nil]) ((26 . 28)) nil (23247 17266 84819 71000) 0 nil]) ((25 . 26)) nil (23247 17266 84827 671000) 0 nil]) ((22 . 25)) nil (23247 17266 84836 260000) 0 nil]) ((1 . 22) (t 23247 17147 863921 866000)) nil (23247 17266 84847 503000) 0 nil]) ((#("data = (\"John\", \"Doe\", 53.44)
format_string = \"Hello %s, %s. Your current balance is $%s.\"

print (format_string % data)
" 0 4 (fontified t face font-lock-variable-name-face) 4 8 (fontified t) 8 9 (fontified t syntax-table #1# face font-lock-string-face) 9 13 (fontified t face font-lock-string-face) 13 14 (fontified t syntax-table #1# face font-lock-string-face) 14 16 (fontified t) 16 17 (fontified t syntax-table #1# face font-lock-string-face) 17 20 (fontified t face font-lock-string-face) 20 21 (fontified t syntax-table #1# face font-lock-string-face) 21 30 (fontified t) 30 43 (fontified t face font-lock-variable-name-face) 43 46 (fontified t) 46 47 (fontified t syntax-table #1# face font-lock-string-face) 47 89 (fontified t face font-lock-string-face) 89 90 (fontified t syntax-table #1# face font-lock-string-face) 90 91 (fontified t) 91 92 (fontified t) 92 97 (fontified t face font-lock-keyword-face) 97 99 (fontified t) 99 120 (fontified t) 120 121 (fontified t)) . 1) (undo-tree-id49 . -90) (undo-tree-id50 . -121) (undo-tree-id51 . -30) (undo-tree-id52 . -30) (undo-tree-id53 . -91) (undo-tree-id54 . -91) (undo-tree-id55 . -92) (undo-tree-id56 . -92) (undo-tree-id57 . -121) (undo-tree-id58 . -121) (undo-tree-id59 . -121) (undo-tree-id60 . -52) (undo-tree-id61 . -121) (undo-tree-id62 . -121) (undo-tree-id63 . -30) (undo-tree-id64 . -30) (undo-tree-id65 . -46) (undo-tree-id66 . -30) (undo-tree-id67 . -30) (undo-tree-id68 . -46) (undo-tree-id69 . -30) (undo-tree-id70 . -30) (undo-tree-id71 . -46) (undo-tree-id72 . -30) (undo-tree-id73 . -30) (undo-tree-id74 . -46) (undo-tree-id75 . -30) (undo-tree-id76 . -30) (undo-tree-id77 . -46) (undo-tree-id78 . -30) (undo-tree-id79 . -30) (undo-tree-id80 . -46) (undo-tree-id81 . -30) (undo-tree-id82 . -30) (undo-tree-id83 . -46) (undo-tree-id84 . -30) (undo-tree-id85 . -30) (undo-tree-id86 . -46) (undo-tree-id87 . -30) (undo-tree-id88 . -30) (undo-tree-id89 . -46) (undo-tree-id90 . -30) (undo-tree-id91 . -30) (undo-tree-id92 . -46) (undo-tree-id93 . -30) (undo-tree-id94 . -30) (undo-tree-id95 . -46) (undo-tree-id96 . -30) (undo-tree-id97 . -30) (undo-tree-id98 . -46) (undo-tree-id99 . -30) (undo-tree-id100 . -30) (undo-tree-id101 . -46) (undo-tree-id102 . -30) (undo-tree-id103 . -30) (undo-tree-id104 . -46) (undo-tree-id105 . -30) (undo-tree-id106 . -30) (undo-tree-id107 . -46) (undo-tree-id108 . -30) (undo-tree-id109 . -30) (undo-tree-id110 . -46) (undo-tree-id111 . -30) (undo-tree-id112 . -30) (undo-tree-id113 . -46) (undo-tree-id114 . -30) (undo-tree-id115 . -30) (undo-tree-id116 . -46) (undo-tree-id117 . -30) (undo-tree-id118 . -30) (undo-tree-id119 . -46) (undo-tree-id120 . -30) (undo-tree-id121 . -30) (undo-tree-id122 . -46) (undo-tree-id123 . -30) (undo-tree-id124 . -30) (undo-tree-id125 . -46) (undo-tree-id126 . -30) (undo-tree-id127 . -30) (undo-tree-id128 . -46) (undo-tree-id129 . -30) (undo-tree-id130 . -30) (undo-tree-id131 . -46) (undo-tree-id132 . -30) (undo-tree-id133 . -30) (undo-tree-id134 . -46) (undo-tree-id135 . -30) (undo-tree-id136 . -30) (undo-tree-id137 . -46) (undo-tree-id138 . -30) (undo-tree-id139 . -30) (undo-tree-id140 . -46) (undo-tree-id141 . -30) (undo-tree-id142 . -30) (undo-tree-id143 . -46) (undo-tree-id144 . -30) (undo-tree-id145 . -30) (undo-tree-id146 . -46) (undo-tree-id147 . -30) (undo-tree-id148 . -30) (undo-tree-id149 . -46) (undo-tree-id150 . -90) (undo-tree-id151 . -30) (undo-tree-id152 . -30) (undo-tree-id153 . -30) (undo-tree-id154 . -30) (undo-tree-id155 . -46) (undo-tree-id156 . -30) (undo-tree-id157 . -30) (undo-tree-id158 . -46) (undo-tree-id159 . -90) (undo-tree-id160 . -30) (undo-tree-id161 . -30) (undo-tree-id162 . -30) (undo-tree-id163 . -30) (undo-tree-id164 . -46) (undo-tree-id165 . -30) (undo-tree-id166 . -30) (undo-tree-id167 . -46) (undo-tree-id168 . -90) (undo-tree-id169 . -30) (undo-tree-id170 . -30) (undo-tree-id171 . -30) (undo-tree-id172 . -30) (undo-tree-id173 . -46) (undo-tree-id174 . -121) (undo-tree-id175 . -121) (undo-tree-id176 . -121) (undo-tree-id177 . -121) (undo-tree-id178 . -121) (undo-tree-id179 . -121) (undo-tree-id180 . -121) (undo-tree-id181 . -121) (undo-tree-id182 . -90) (undo-tree-id183 . -121) (undo-tree-id184 . -29) (undo-tree-id185 . -30) (undo-tree-id186 . -29) (undo-tree-id187 . -30) (undo-tree-id188 . -29) (undo-tree-id189 . -30) (undo-tree-id190 . -121) 122 (t 23247 17100 543736 842000)) nil (23247 17147 854015 214000) 0 nil]) ((86 . 90)) nil (23247 17100 540571 629000) 0 nil]) ((#("%" 0 1 (fontified t face font-lock-string-face)) . -86) (undo-tree-id48 . -1) 87) nil (23247 17100 540599 858000) 0 nil]) ((74 . 87)) nil (23247 17100 540610 658000) 0 nil]) ((53 . 74) (t 23247 17087 463685 698000)) nil (23247 17100 540620 815000) 0 nil]) ((76 . 84)) nil (23247 17087 458840 333000) 0 nil]) ((63 . 76) (#("format_st" 0 9 (fontified t)) . -63) (undo-tree-id39 . -9) 72) nil (23247 17087 458876 657000) 0 nil]) ((56 . 72)) nil (23247 17087 458892 239000) 0 nil]) ((#("print(\"%s %s %s. Your current balance is $%s.\" % (format_string, data[0], data[1], data[2]))" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 7 (fontified t syntax-table #1# face font-lock-string-face) 7 9 (fontified t face font-lock-string-face) 9 45 (fontified t face font-lock-string-face) 45 46 (fontified t syntax-table #1# face font-lock-string-face) 46 48 (fontified t) 48 50 (fontified t) 50 92 (fontified t)) . 56) (undo-tree-id40 . -92) (undo-tree-id41 . -92) (undo-tree-id42 . -92) (undo-tree-id43 . -92) (undo-tree-id44 . -92) (undo-tree-id45 . -92) (undo-tree-id46 . -92) (undo-tree-id47 . -92) (t 23247 17042 51505 118000)) nil (23247 17087 458935 704000) 0 nil]) ((100 . 101)) nil (23247 17042 45712 999000) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-string-face)) . -100) (undo-tree-id38 . -1) 101) nil (23247 17042 45744 197000) 0 nil]) ((100 . 101) (t 23247 17032 331465 722000)) nil (23247 17042 45760 544000) 0 nil]) ((136 . 145) (t 23247 17028 75448 472000)) nil (23247 17032 325766 374000) 0 nil]) ((97 . 100)) nil (23247 17028 71182 828000) 0 nil]) ((#("%" 0 1 (fontified t face font-lock-string-face)) . -97) (undo-tree-id35 . -1) (#("$" 0 1 (fontified t face font-lock-string-face)) . -98) (undo-tree-id36 . -1) 99) nil (23247 17028 71231 837000) 0 nil]) ((97 . 99)) nil (23247 17028 71249 431000) 0 nil]) ((#("%" 0 1 (fontified t face font-lock-string-face)) . -97) (undo-tree-id37 . -1) 98) nil (23247 17028 71264 211000) 0 nil]) ((97 . 98)) nil (23247 17028 71270 874000) 0 nil]) ((92 . 97)) nil (23247 17028 71275 824000) 0 nil]) ((71 . 92) (t 23247 17001 851342 183000)) nil (23247 17028 71282 619000) 0 nil]) ((68 . 71) (t 23247 16998 847330 8000)) nil (23247 17001 847509 620000) 0 nil]) ((103 . 104)) nil (23247 16998 829850 432000) 0 nil]) ((#("-" 0 1 (fontified t)) . -103) (undo-tree-id29 . -1) 104) nil (23247 16998 829883 438000) 0 nil]) ((103 . 104)) nil (23247 16998 829895 658000) 0 nil]) ((#("=" 0 1 (fontified t)) . -103) (undo-tree-id30 . -1) 104) nil (23247 16998 829914 720000) 0 nil]) ((103 . 104)) nil (23247 16998 829926 117000) 0 nil]) ((#("-" 0 1 (fontified t)) . -103) (undo-tree-id31 . -1) 104) nil (23247 16998 829944 619000) 0 nil]) ((103 . 104)) nil (23247 16998 829955 788000) 0 nil]) ((#("0" 0 1 (fontified t)) . -103) (undo-tree-id32 . -1) 104) nil (23247 16998 829973 730000) 0 nil]) ((93 . 104)) nil (23247 16998 829984 897000) 0 nil]) ((#("]" 0 1 (fontified t)) . -93) (undo-tree-id33 . -1) (#("1" 0 1 (fontified t)) . -94) (undo-tree-id34 . -1) 95) nil (23247 16998 830012 652000) 0 nil]) ((92 . 95) (t 23247 16938 383084 940000)) nil (23247 16998 830028 748000) 0 nil]) ((92 . 93)) nil (23247 16938 378803 423000) 0 nil]) ((#("0" 0 1 (fontified t)) . -92) (undo-tree-id27 . -1) 93) nil (23247 16938 378837 674000) 0 nil]) ((92 . 93)) nil (23247 16938 378850 989000) 0 nil]) ((#("_" 0 1 (fontified t)) . -92) (undo-tree-id28 . -1) 93) nil (23247 16938 378882 744000) 0 nil]) ((92 . 93)) nil (23247 16938 378895 572000) 0 nil]) ((72 . 73) (t 23247 16932 459060 929000)) nil (23247 16938 378922 316000) 0 nil]) ((85 . 87)) nil (23247 16932 331371 550000) 0 nil]) ((#(" " 0 1 (fontified t)) . -85) (undo-tree-id24 . -1) 86) nil (23247 16932 331404 353000) 0 nil]) ((#("%" 0 1 (fontified t)) . -86) (undo-tree-id25 . -1) (#(" " 0 1 (fontified t)) . -87) (undo-tree-id26 . -1) 88 (t 23247 16920 467012 324000)) nil (23247 16932 331430 900000) 0 nil]) ((86 . 88) (t 23247 16917 755001 332000)) nil (23247 16920 464748 469000) 0 nil]) ((#("%" 0 1 (fontified t)) . -86) (undo-tree-id22 . -1) (#(" " 0 1 (fontified t)) . -87) (undo-tree-id23 . -1) 88) nil (23247 16917 751540 591000) 0 nil]) ((69 . 71) (t 23247 16914 518988 216000)) nil (23247 16917 751564 961000) 0 nil]) ((#("%" 0 1 (fontified t)) . -69) (undo-tree-id19 . -1) 70) nil (23247 16914 515588 301000) 0 nil]) ((68 . 70)) nil (23247 16914 515607 93000) 0 nil]) ((64 . 65)) nil (23247 16914 515614 86000) 0 nil]) ((#("s" 0 1 (fontified t face font-lock-string-face)) . -64) (undo-tree-id20 . -1) (#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -65) (undo-tree-id21 . -1) 66 (t 23247 16907 134958 288000)) nil (23247 16914 515633 45000) 0 nil]) ((66 . 69)) nil (23247 16907 131265 393000) 0 nil]) ((63 . 65)) nil (23247 16907 131279 59000) 0 nil]) ((62 . 65) (t 23247 16805 166545 0)) nil (23247 16907 131290 500000) 0 nil]) ((#("[" 0 1 (fontified t)) . -82) (undo-tree-id16 . -1) (#("1" 0 1 (fontified t)) . -83) (undo-tree-id17 . -1) (#("]" 0 1 (fontified t)) . -84) (undo-tree-id18 . -1) 85 (t 23247 16797 670514 618000)) nil (23247 16805 161921 108000) 0 nil]) ((#(" " 0 1 (fontified t)) . -85) (undo-tree-id14 . -1) (#("%" 0 1 (fontified t)) . -86) (undo-tree-id15 . -1) 87) nil (23247 16797 668385 999000) 0 nil]) ((85 . 87)) nil (23247 16797 668404 413000) 0 nil]) ((83 . 84)) nil (23247 16797 668413 469000) 0 nil]) ((82 . 84) (t 23247 16763 770377 217000)) nil (23247 16797 668425 642000) 0 nil]) ((#(" + \"John Doe. Your current balance is $\"" 0 3 (fontified t) 3 4 (fontified t syntax-table #1# face font-lock-string-face) 4 39 (fontified t face font-lock-string-face) 39 40 (fontified t syntax-table #1# face font-lock-string-face)) . 54) (undo-tree-id10 . -40) (undo-tree-id11 . -40) (undo-tree-id12 . -40) (undo-tree-id13 . -40) 94 (t 23247 16738 726275 711000)) nil (23247 16763 766685 643000) 0 nil]) ((#(" " 0 1 (fontified t)) . -101) (undo-tree-id9 . -1) 102 (t 23247 16722 62208 170000)) nil (23247 16738 723646 390000) 0 nil]) ((73 . 93)) nil (23247 16722 58366 825000) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-string-face)) . -73) (undo-tree-id7 . -1) 74) nil (23247 16722 58401 274000) 0 nil]) ((58 . 74)) nil (23247 16722 58417 635000) 0 nil]) ((54 . 59)) nil (23247 16722 58428 437000) 0 nil]) ((#(" " 0 1 (fontified t)) . -54) (undo-tree-id8 . -1) 55) nil (23247 16722 58441 761000) 0 nil]) ((54 . 55) (t 23247 16677 302026 753000)) nil (23247 16722 58449 701000) 0 nil]) ((84 . 85)) nil (23247 16677 266877 825000) 0 nil]) ((67 . 84)) nil (23247 16677 266891 979000) 0 nil]) ((56 . 67)) nil (23247 16677 266901 259000) 0 nil]) ((54 . 56)) nil (23247 16677 266910 314000) 0 nil]) ((53 . 54)) nil (23247 16677 266919 196000) 0 nil]) ((32 . 53)) nil (23247 16677 266928 46000) 0 nil]) ((31 . 32)) nil (23247 16677 266936 844000) 0 nil]) ((30 . 31)) nil (23247 16677 266947 999000) 0 nil]) ((26 . 30)) nil (23247 16677 266956 874000) 0 nil]) ((#("," 0 1 (fontified t)) . -26) (undo-tree-id0 . -1) 27) nil (23247 16677 266986 750000) 0 nil]) ((22 . 27)) nil (23247 16677 266999 143000) 0 nil]) ((18 . 21)) nil (23247 16677 267008 5000) 0 nil]) ((17 . 19)) nil (23247 16677 267016 858000) 0 nil]) ((#("D" 0 1 (fontified t)) . -17) (undo-tree-id1 . -1) 18) nil (23247 16677 267036 200000) 0 nil]) ((14 . 18)) nil (23247 16677 267047 688000) 0 nil]) ((#("," 0 1 (fontified t face font-lock-string-face)) . -14) (undo-tree-id2 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -15) (undo-tree-id3 . -1) (#("\"" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -16) (undo-tree-id4 . -1) (#("D" 0 1 (fontified t)) . -17) (undo-tree-id5 . -1) 18) nil (23247 16677 267099 831000) 0 nil]) ((9 . 18)) nil (23247 16677 267118 999000) 0 nil]) ((#("'" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -9) (undo-tree-id6 . -1) 10) nil (23247 16677 267137 477000) 0 nil]) ((1 . 10) (t 23247 14165 810859 159000)) nil (23247 16677 267151 328000) 0 nil]) nil nil (23247 16677 267158 269000) 0 nil] #2# 17118 425 nil]