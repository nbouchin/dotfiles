;;; PACKAGE-ARCHIVES --- Summary.
;;; Commentary:
(require 'package)

(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t) (add-to-list 'package-archives '("melpa" . "https://melpa.milkbox.net/packages/") t)

;;; Code:
(package-initialize)

;; Install all packages.
(defun my-install ()
  "My-install searchg all packages in package-list and install them if not installed."
  (interactive)
  (defvar package-list)
  (setq package-list '(ac-c-headers autopair yasnippet-snippets yasnippet company-c-headers company flycheck evil-leader key-chord org-evil gruvbox-theme evil magit undo-tree))
  ;; fetch the list of packages available.
  (unless package-archive-contents
	(package-refresh-contents))
  ;; install the missing packages.
  (dolist (package package-list)
	(unless (package-installed-p package)
	  (package-install package)))
  )

;; Byte compile config.
(defun my-recompile ()
  "My-recompile byte-compile all configuration."
  (interactive)
  (byte-recompile-directory (expand-file-name "~/.emacs.d") 0))

(defun reload-dotemacs-file ()
  "Reload .emacs file without restarting Emacs."
  (interactive)
  (load-file "~/.emacs"))

(menu-bar-mode -1)
(load-theme 'gruvbox-dark-hard t nil)
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
(setq backup-directory-alist `(("." . "~/.emacs.d/saves"))); Set emacs swap directory.

(set-cursor-color "white")
(tool-bar-mode -1); Padding configuration.
(global-hl-line-mode 1)
(set-language-environment "UTF-8")
(setq ring-bell-function 'ignore)
(setq-default font-lock-global-modes t)
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
(setq-default c-backspace-function 'backward-delete-char)
(setq-default c-basic-offset 4)
(setq-default c-default-style "linux")
(setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
								64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

(global-undo-tree-mode); Start undo-tree with emacs.
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))

(global-flycheck-mode)
(require 'company)
(require 'cc-mode)
(require 'yasnippet)
(require 'pos-tip)
(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0)
(add-to-list 'company-backends 'company-c-headers)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-backends (delete 'company-semantic company-backends))
(yas-global-mode)

(define-key company-active-map [tab] 'company-complete-selection)
(define-key company-active-map (kbd "TAB") 'company-complete-selection)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)

(require 'evil)
(evil-mode 1)

(require 'key-chord)
(key-chord-mode 1)

(key-chord-define evil-insert-state-map "kj" 'evil-normal-state)

(global-evil-leader-mode)
(setq evil-normal-state-modes (append evil-motion-state-modes evil-normal-state-modes))
(setq evil-motion-state-modes nil)
(setq evil-normal-state-modes (append evil-emacs-state-modes evil-normal-state-modes))
(setq evil-emacs-state-modes nil)
;; ESC to NORMAL even from emacs state
(define-key evil-emacs-state-map [escape] 'evil-normal-state)
;; don't let modes override the INSERT state (!)
(setq evil-overriding-maps nil
	  evil-intercept-maps nil)
;; telling-mode cursor
(evil-leader/set-leader ";")

(evil-leader/set-key
  "n" 'evil-prev-buffer
  "p" 'evil-next-buffer
  "d" 'evil-delete-buffer
  "c" 'magit-status)


(cl-loop for (mode . state) in '((inferior-emacs-lisp-mode . normal)
								 (package-menu-mode . normal)
								 (magit-mode . insert)
								 (magit-status-mode . insert)
								 (magit-popup-mode . insert)
								 (magit-branch-manager-mode . insert)
								 (nrepl-mode . normal)
								 (pylookup-mode . normal)
								 (comint-mode . insert)
								 (shell-mode . normal)
								 (git-commit-mode . insert)
								 (git-rebase-mode . insert)
								 (term-mode . insert)
								 (help-mode . normal)
								 (helm-grep-mode . normal)
								 (grep-mode . normal)
								 (bc-menu-mode . normal)
								 (rdictcc-buffer-mode . normal)
								 (dired-mode . normal)
								 (wdired-mode . normal))
		 do (evil-set-initial-state mode state))

(provide 'emacs)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
	(ac-c-headers ac-clang autopair yasnippet-snippets yasnippet company flycheck org-evil magit key-chord gruvbox-theme evil-leader))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
